
```c
#ifndef GRAVITY_7
#define GRAVITY_7

#define DIM 3
#define NUM_BODIES 4000
#define MAX_BODIES 10000
#define C_REST 0.8
#define TRACEN 1000
#define DEFAULT_G 0.5

#define TIMER 20

/* Define the Window dimensions */
#define WIN_WIDTH	800	/* WINDOW Width in pixels */
#define WIN_HEIGHT	800	/* WINDOW Height in pixels */

/* Define the key to exit the system */
#define ESC	27

typedef struct {
	double mass;
	double position[DIM];
	double velocity[DIM];
	double accel[DIM];
	double radius;
	float colour[3];
	char name[20];
	double ang;
	double dist;
	int home;
} Moon;

typedef struct {
	double mass;
	double position[DIM];
	double velocity[DIM];
	double accel[DIM];
	double radius;
	float colour[3];
	double pop;//population
	double maxpop;//maximum population on planet
	double popgrow;//yearly growth of population based on many factors
	int atm;//atmosphere number
	char name[20]; //The name of the planet, currently unused
	char typnm[20]; //the type of the planet - desert, ice, etc
	int type;//planet type, water, ice etc.
	int savage;//savagery of planet
	int enviro;//environment of planet
	int moonnum; //the number of moons around this planet
	double ang;//angle for planet-sun orbit function
	double dist;//distant from sun which planets orbit
	char atmNm[10];//atmosphere rank name
	char savNm[20];//savagery rank name
	char envNm[10];//enviro. rank name
} Object;






typedef struct{
int plan;//planet number this menu button will link to
int selected;
} Button;

typedef struct {
    int numBodies ;
    Object bodies[MAX_BODIES] ;
    Moon moons[MAX_BODIES];
    int numMoons;
    double trace[MAX_BODIES][TRACEN][DIM] ;
    long numCollisions ;
    int collided[MAX_BODIES];  // "status" array, indicating whether a body has already collided or not
    double G ;
    Button buttons[6];
    int fixed ; // determines whether universe was read from file (1) or random (0)
} Universe ;



void myDrawLib(void);
void myKeyLib(unsigned char key, int x, int y);
void initialiseLib(void);
void simulateGravityLib(int data);
void computeCollisionLib(Object *a, Object *b);
void calculateGravityLib ( double m1, double m2, double pos1[DIM], double pos2[DIM], double G, double result[DIM]);
int loadUniverseLib ( Universe *u, char filename[]) ;
void arrayZeroLib(double a[DIM]);
double vectorDotLib(double a[DIM], double b[DIM]);
void nameAtmo(int plan,char atmNm[10]);//ranking the atmosphere of a planet in terms of liveability for target advanced life
void nameEnviro(int plan,char envNm[10]);//ranking the hostility of a planets natural environment for the advanced lifeform pop.
void nameSav(int plan, char savNm[20]);//ranking the hostility of a planets biological (animal) population

// Prototypes from main program
void arrayZero(double a[DIM]);//sets an array to zero
double vectorDot(double a[DIM], double b[DIM]);
void initialise(void);
void calculateGravity ( double m1, double m2, double pos1[DIM], double pos2[DIM], double G, double result[DIM]);
void simulateGravity(int data);//new gravity function to have planets orbiting sun
void computeCollision(Object *b1, Object *b2);
int loadUniverse ( Universe *u, char filename[]) ;



#endif

