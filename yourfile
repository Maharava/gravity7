```c
/*  For linux:  -lglut -lGL -lGLU -lm */
/*  For windows:  -lfreeglut -lopengl32 -lglu32 -lm */

#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/freeglut.h>

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <math.h>
#include "gravity.h"
#include "Planet.h"
#include "menu.h"

/* Define the window dimensions */
#define WIN_WIDTH	1100
#define WIN_HEIGHT	650

/* Define the key to exit the system */
#define ESC	27

void myDraw(void);
void myKey(unsigned char key,int x, int y);


// Simulation parameters (do not change)
#define VECTOR_DIM 3  // vector dimension
#define MAX_BODIES 10000  // maximum number of bodies supported


#define TIMER 20  // number of milliseconds for each time step (for glutTimerFunc)

const double timeStep = 0.001;  // in seconds
double gtime, year=0,tcount = 0;  // zoom factor and global time
float azi = 0, alt = 0;  // azimuth and altitude
const float dstep = 2;  // step-size for the azimuth and altitude
int showstats = 1, click = 0;  // flag variable for indicating whether trajectory trace is on or not


// Universe, containing everything
System sys ;


/* main program â€“ execution begins here */
int main(int argc, char *argv[])
	{
	int seed, res=0 ;

	glutInit(&argc, argv); 				// initialise gl utility system
	glutInitWindowSize(WIN_WIDTH, WIN_HEIGHT); // define window size
	glutInitDisplayMode(GLUT_DOUBLE);
	//glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
	glutCreateWindow ("Ryan and Reece's gravity simulator"); 	// create window with title

	/* Register the callback functions to the current window */
	glutDisplayFunc(myDraw);  		// register function for drawing event
	glutKeyboardFunc(myKey);		// register function for keyboard event
	glutTimerFunc(TIMER, simulateGravity, 0);
	zoom = 1;  // initialise zoom to 1
	// set collision flags for each body to 0 (i.e. no collision)
	// set the random seed
	seed = (int)time(NULL);
	srand(seed);
    res = loadSystem ( &sys, 1);
    if ( res == 0 )
		{
		sys.fixed = 0;
		printf("Bodies: %d",sys.sysBodies);
		sys.sysBodies = rand()%10+3;
		}
	else
		{
		sys.fixed = 1;
		}
    initialise();  // initialise simulation
	/* Draw window and loop forever. Any keypress will call mykey() */
	glutMainLoop();

	/* program will never get here */
	return (0);
}

// zeros a DIM array
void arrayZero(double a[DIM])
	{
	int i = 0;
	for (i=0;i<DIM;i++)
		{
		a[i] = 0;
		}
	}


//Increases tcount until it's hit the year point (>=5), at which point populations are updated
//also updates the planets terrain descriptions in case of changes (changes not implemented)
void newYear(void)
	{
	int i = 0, c=0;
	tcount += timeStep*10;
	if (tcount >= 5)
		{
		year += 1;
		for(i=0;i<sys.sysBodies;i++)
			{
			c = sys.bodies[i].pop*0.014; //sets a base pop increase of 1.4% of population
			c *= 1+(sys.bodies[i].popgrow/100); //adjusts 'c' to include the population modification of the planet
			sys.bodies[i].pop += c; //increases population
			nameSav(i,sys.bodies[i].savNm);
			nameAtmo(i,sys.bodies[i].atmNm);
			nameEnviro(i,sys.bodies[i].envNm); //re-updates planetary terrain descriptors
			if (sys.bodies[i].pop > sys.bodies[i].maxpop)
				{
				sys.bodies[i].pop = sys.bodies[i].maxpop; //keeps the pop from going over the maximum allowed
            	}
			}
		tcount = 0;
		}
	}

void calculateGravity ( double m1, double m2, double pos1[DIM], double pos2[DIM], double G, double result[DIM])
	{
	double distVect[DIM], distMag=0, gForce=0;
	int i = 0; //counter variable
    arrayZero(result);
    arrayZero(distVect);
	for(i=0;i<DIM;i++)
		{
		distVect[i] = pos2[i]-pos1[i];
		distMag += distVect[i]*distVect[i];
		}
	distMag = sqrt(distMag);
	for(i=0;i<DIM;i++)
		{
		distVect[i] = distVect[i]/distMag;
		}
	gForce = G*m1*m2/(distMag*distMag+0.25);
	for(i=0;i<DIM;i++)
		{
		result[i] = distVect[i]*gForce;
		}
  // calculateGravityLib ( m1, m2, pos1, pos2, G, result);
}
//a new version of simulateGravity, forcing planets and moons into circular orbits
void simulateGravity(int data)
	{
	int i=0;
	for(i=1;i<sys.sysBodies;i++)
		{
		sys.bodies[i].position[0] = cos(sys.bodies[i].ang) * sys.bodies[i].dist;
		sys.bodies[i].position[1] = sin(sys.bodies[i].ang) * sys.bodies[i].dist; //works out the new position based on their angle from the centre
		sys.bodies[i].ang += ((1-sys.bodies[i].dist/5)+(sys.bodies[i].mass/1000))/300; //increases angle based on distance from the sun and the mass of the planet
		if (sys.bodies[i].ang >=6.28)
			{
			sys.bodies[i].ang -= 6.28; //resets down below 2pi
			}
		}
	for(i=0;i<sys.numMoons;i++) //same as above, but for moons. Main difference is the addition of the homeworlds position - as they don't orbit the centre(sun), we need to adjust their position by their homeworlds
		{
		sys.moons[i].position[0] = sys.bodies[sys.moons[i].home].position[0]+cos(sys.moons[i].ang) * sys.moons[i].dist;
		sys.moons[i].position[1] = sys.bodies[sys.moons[i].home].position[1]+sin(sys.moons[i].ang) * sys.moons[i].dist;
		sys.moons[i].ang += ((1-sys.moons[i].dist/5)+(sys.moons[i].mass/1000))/50;
		if (sys.moons[i].ang >=6.28)
			{
			sys.moons[i].ang -= 6.28;
			}
		}
	gtime += timeStep ;
	glutPostRedisplay();
	glutTimerFunc ( TIMER, simulateGravity, 0 ) ;
	}

int loadSystem ( System *u, int sysnum){
	int i=0, c=0, j=0, r=-1; //r 0 is readinf sun, r1 is reading planets, r2 is reading moons
	char filename[20];
	char buff[500];
	FILE* univ;
	sprintf(filename, "system%d.txt",sysnum);
	univ = fopen(filename,"r");
	if (univ == NULL)
		{
		printf("No saved file found");
		return(0);
		}
	else
		{
		printf("Save file found.\n");
		while(fgets(buff,sizeof buff,univ)!= NULL)
			{
			printf("Reading = %lf\n",buff[0]);
			if(buff[0] == 'S')//reading sun
				{
				printf("Sun\n");
				for(j=0;j<200;j++)
					{
					printf("%c ",buff[j]);
					}
				sscanf(buff,"%s %lf %lf %lf %lf %lf %lf %lf",&sys.bodies[i].name,&sys.bodies[i].position[0],&sys.bodies[i].position[1],&sys.bodies[i].position[2],&sys.bodies[i].radius,&sys.bodies[i].colour[0],&sys.bodies[i].colour[1],&sys.bodies[i].colour[2]);
				//printf("\nP1 %lf P2 %lf P3 %lf C1 %lf C2 %lf C3 %lf Rad %lf\n",sys.bodies[0].position[0],sys.bodies[0].position[1],sys.bodies[0].position[2],sys.bodies[0].colour[0],sys.bodies[0].colour[1],sys.bodies[0].colour[2]),sys.bodies[0].radius;
				sys.bodies[i].mass = 2000;
				i ++;
				}
			if(buff[0] == 'P') //reading planet
				{
				sscanf(buff,"%s %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %d %d %d %lf %d\n",&sys.bodies[i].name,&sys.bodies[i].position[0],&sys.bodies[i].position[1],&sys.bodies[i].position[2],&sys.bodies[i].mass,&sys.bodies[i].radius,&sys.bodies[i].colour[0],&sys.bodies[i].colour[1],&sys.bodies[i].colour[2],&sys.bodies[i].ang,&sys.bodies[i].dist,&sys.bodies[i].enviro,&sys.bodies[i].atm,&sys.bodies[i].savage,&sys.bodies[i].pop,&sys.bodies[i].type);
				printf("P%d %lf %lf %lf\n",i,sys.bodies[i].colour[0],sys.bodies[i].colour[1],sys.bodies[i].colour[2]);
				nameType(i);
				nameAtmo(i,sys.bodies[i].atmNm);
				nameEnviro(i,sys.bodies[i].envNm);
				nameSav(i,sys.bodies[i].savNm);
				sys.bodies[i].maxpop = findMaxPop(i);
				i ++;
				}
			if(buff[0] == 'M') //reading moon
				{
				sscanf(buff,"%s %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %d\n",&sys.moons[c].name,&sys.moons[c].position[0],&sys.moons[c].position[1],&sys.moons[c].position[2],&sys.moons[c].colour[0],&sys.moons[c].colour[1],&sys.moons[i].colour[2],&sys.moons[c].mass,&sys.moons[c].radius,&sys.moons[c].ang,&sys.moons[c].dist,&sys.moons[c].home);
				sys.moons[c].position[0]= sys.bodies[sys.moons[c].home].position[0]+cos(sys.moons[c].ang) * sys.moons[c].dist;
				sys.moons[c].position[1]= sys.bodies[sys.moons[c].home].position[1]+cos(sys.moons[c].ang) * sys.moons[c].dist;
				printf("Moon%d %d %lf %lf - %lf %lf\n",c, sys.moons[c].home,sys.bodies[sys.moons[c].home].position[0],sys.bodies[sys.moons[c].home].position[1],sys.moons[c].position[0],sys.moons[c].position[1]);
				c++;
				}
			}
		}
	fclose(univ);
	sys.sysBodies = i;
	sys.numMoons = c;
	printf("%d\n",i);
	return(i);
	}

void saveSystem(int sysnum)
	{
	int i=0;
	char filename[20];
	FILE* syst;
	sprintf(filename,"system%d.txt",sysnum);
	syst = fopen(filename,"w");
	fprintf(syst,"Sun %lf %lf %lf %lf %lf %lf %lf\n",sys.bodies[0].position[0],sys.bodies[0].position[1],sys.bodies[0].position[2],sys.bodies[0].radius,sys.bodies[0].colour[0],sys.bodies[0].colour[1],sys.bodies[0].colour[2]);
	printf("C1 %lf C2 %lf C3 %lf\n",sys.bodies[0].colour[0],sys.bodies[0].colour[1],sys.bodies[0].colour[2]);
	for(i=1;i<sys.sysBodies;i++)
		{
		fprintf(syst,"%s %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %d %d %d %lf %d\n",sys.bodies[i].name,sys.bodies[i].position[0],sys.bodies[i].position[1],sys.bodies[i].position[2],sys.bodies[i].mass,sys.bodies[i].radius,sys.bodies[i].colour[0],sys.bodies[i].colour[1],sys.bodies[i].colour[2],sys.bodies[i].ang,sys.bodies[i].dist,sys.bodies[i].enviro,sys.bodies[i].atm,sys.bodies[i].savage,sys.bodies[i].pop,sys.bodies[i].type);
		}
	for(i=0;i<sys.numMoons;i++)
		{
		fprintf(syst,"%s %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %d\n",sys.moons[i].name,sys.moons[i].position[0],sys.moons[i].position[1],sys.moons[i].position[2],sys.moons[i].colour[0],sys.moons[i].colour[1],sys.moons[i].colour[2],sys.moons[i].mass,sys.moons[i].radius,sys.moons[i].ang,sys.moons[i].dist,sys.moons[i].home);
		}
	printf("System %d saved.\n",sysnum);
	fclose(syst);
	}

// initialise planets, moons and the sun
void initialise(void)
	{
	int i = 0,j = 0, dist=0;
   	double res[DIM];
	gtime = 0;
	year = 0; //resets core variables
	for(i=0;i<(sys.sysBodies-1);i++)
		{
		sys.buttons[i].selected = 0; //creates the side panel menu buttons. sys.sysBodies-1 is due to the sun, and not needing a button for it
		}
	sys.buttons[0].selected = 1; //auto-selects the first menu button

	if (sys.fixed == 0)
		{
		for(i=0;i<sys.sysBodies;i++)
			{
			sys.bodies[i].mass = ((float)rand()/(float)RAND_MAX)*20+.1;
			sys.bodies[i].radius = .025+(sys.bodies[i].mass/100); //gives the planets mass and radius
			for(j=0;j<DIM;j++)
				{
		        sys.bodies[i].colour[j] = (float)rand()/(float)RAND_MAX; //sets the planets colour
               	}
			j = (rand()%6/10)+(rand()%6/10);
			sys.bodies[i].position[0] = .65+(.5*i);
			sys.bodies[i].position[1] = .65+(.5*i); //position is set from the sun according to which number this planet is
			sys.bodies[i].position[2] = 0;
			sys.bodies[i].dist = 0;
			sys.bodies[i].ang = rand() % 6; //ensures that all planets don't start in line with each other
			for(j=0;j<DIM;j++)
				{
				sys.bodies[i].dist += pow(sys.bodies[i].position[j],2); //works out the distance between the planet and the sun
				}
			sys.bodies[i].dist = sqrt(sys.bodies[i].dist);
			genworld(i); //generates the worlds other stats
			}
		sys.bodies[0].mass = 2000; //sets the suns base mass
		sys.bodies[0].radius = (sys.bodies[0].mass/3000); //sets the suns radius
		for(j=0;j<DIM;j++)
			{
			sys.bodies[0].position[j] = 0;
			sys.bodies[0].colour[j] = (float)((rand()%5)+5)/10; //suns colour
			printf("Sun %lf\n", sys.bodies[0].colour[j]);
			}
		sscanf("Sun","%s",sys.bodies[0].typnm); //name
		for(i=1;i<sys.sysBodies;i++)
			{
			genMoons(i); //generate moons
			}
			//this function works out all the distances for the planets from the sun
			for(i=1;i<sys.sysBodies;i++)
				{
				arrayZero(res);
				for(j=0;j<DIM;j++)
					{
					dist += pow(sys.bodies[i].position[j]-sys.bodies[0].position[j],2);
					}
				dist = sqrt(dist)/2; //gives us the radius of the orbit
				}
        }
    }

void myKey(unsigned char key, int x, int y)
{
	int i=0;
	switch(key)
		{
		case '1':
			{
			if (menu == 0)
				menu = 1;
			break;
			}
		case 'e':
			{
			if (menu == 1)
				menu = 2;
			break;
			}
		case 'p':
			{
			saveSystem(1);
			break;
			}
		case 'a':
			{
			if (azi < 360)
				azi += dstep;
			else
				azi -= 360;
			break;
			}
		case 'd':
			{
			if (azi <0)
				azi += 360;
			else
				azi -= dstep;
			break;
			}
		case 'w':
			{
			if (alt > 360)
				alt -= 360;
			else
				alt += dstep;
			break;
			}
		case 's':
			{
			if (alt < 0)
				alt += 360;
			else
				alt -= dstep;
			break;
			}
		case 'z':
			{
			zoom /= 0.9;
			break;
			}
		case 'x':
			{
			zoom *= 0.9;
			break;
			}
		case 'o': //goes up the menu tree
			{
			if (menu == 1)
				{
				for(i=1;i<(sys.sysBodies-1);i++)
					{
					if (sys.buttons[i].selected == 1 && click == 0)
						{
						sys.buttons[i].selected = 0;
						sys.buttons[i-1].selected = 1;
						click = 2;
						}
					}
				}
			break;
			}
		case 'l': //goes down the menu tree
			{
			if (menu == 1)
				{
				for(i=0;i<(sys.sysBodies-2);i++)
					{
					if (sys.buttons[i].selected == 1 && click == 0)
						{
						sys.buttons[i].selected = 0;
						sys.buttons[i+1].selected = 1;
						click = 2;
						}
					}
				}
			break;
			}
		}

	// Uncomment the following to enable ESC key
		int win=0;
		if (key == ESC) {
		win=glutGetWindow() ; 		/* get identifier for current window */
		glutDestroyWindow(win) ; 	/* close the current window */
		exit(-1) ; 					/* leave the program */
	}
	}

void myDraw(void)
{
	/* clear the screen */
	glClear(GL_COLOR_BUFFER_BIT);

	/* Put your drawing code in here */

	if (click > 0)
		{
		click -= .1; //keeps click from allowing buttons to repeat dozens of times per timestep
		}


    char buffer[256];
    int i = 0;

    glLoadIdentity();
    glPushMatrix();

	glColor3f(1,1,1);

    glRasterPos2f(-0.99,-0.70);
    sprintf(buffer,"s/w Vertical Rotation",sys.sysBodies);
    glutBitmapString(GLUT_BITMAP_8_BY_13,buffer);

    glRasterPos2f(-0.99,-0.65);
    sprintf(buffer,"a/d: Horizontal rotation");
    glutBitmapString(GLUT_BITMAP_8_BY_13,buffer);

	glRasterPos2f(-0.99,-0.60);
    sprintf(buffer,"z/x: Zoom");
    glutBitmapString(GLUT_BITMAP_8_BY_13,buffer);

    glRasterPos2f(-0.99,0.95);
    sprintf(buffer,"Year: %.0lf",year);
    glutBitmapString(GLUT_BITMAP_8_BY_13,buffer);

	drawMenu(buffer);

	glColor3f(1,1,1);
    glPopMatrix();

    glRotatef(azi,0,1,0);
    glRotatef(alt,1,0,0);

	for(i=0;i<sys.sysBodies;i++)
		{
        glPushMatrix();
        glTranslatef(sys.bodies[i].position[0] *zoom,sys.bodies[i].position[1] *zoom,sys.bodies[i].position[2] *zoom);
        glColor3f(sys.bodies[i].colour[0],sys.bodies[i].colour[1],sys.bodies[i].colour[2]);
        glutSolidSphere(sys.bodies[i].radius*zoom,10,10);
        if (menu == 1 && sys.buttons[i-1].selected == 1)
			{
			glColor3f(0,0,1);
			glutWireSphere(((sys.bodies[i].radius)*1.25)*zoom,4,4);
			}
        glPopMatrix();
        }
	for(i=0;i<sys.numMoons;i++)
		{
        glPushMatrix();
        glTranslatef(sys.moons[i].position[0] *zoom,sys.moons[i].position[1] *zoom,sys.moons[i].position[2] *zoom);
        glColor3f(sys.moons[i].colour[0],sys.moons[i].colour[1],sys.moons[i].colour[2]);
        glutSolidSphere(sys.moons[i].radius*zoom,10,10);
        glPopMatrix();
        }

	glBegin(GL_LINES);
	glColor3f(1,0,0);
	glVertex3f(-0.5*zoom,-0.5*zoom,-0.5*zoom);
	glVertex3f(-0.2*zoom,-0.5*zoom,-0.5*zoom);
    glEnd();

    glBegin(GL_LINES);
	glColor3f(0,1,0);
	glVertex3f(-0.5*zoom,-0.5*zoom,-0.5*zoom);
	glVertex3f(-0.5*zoom,-0.2*zoom,-0.5*zoom);
    glEnd();

    glBegin(GL_LINES);
	glColor3f(0,0,1);
	glVertex3f(-0.5*zoom,-0.5*zoom,-0.5*zoom);
	glVertex3f(-0.5*zoom,-0.5*zoom,-0.2*zoom);
    glEnd();

    glPopMatrix();
    glutSwapBuffers();

	newYear();
}
